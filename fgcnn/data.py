# AUTOGENERATED! DO NOT EDIT! File to edit: 01_data.ipynb (unless otherwise specified).

__all__ = ['DATA_DIR', 'read_dataset', 'add_time_feat', 'split_train_test', 'make_dataset', 'DateSplitter', 'create_dl',
           'get_dl']

# Cell
import pandas as pd

from   pathlib import Path
from   fastai.tabular.all import *
from   datetime import datetime

# Cell
DATA_DIR = Path('~/data/')

# Cell
def read_dataset(nrows:int=14000000): return pd.read_csv(DATA_DIR / 'train', nrows=nrows)
def add_time_feat(df):
    df = df.assign(click_hour=df.hour.astype('str').str.slice(6))
    return df

def split_train_test(df, crit):
    """
    Split dataset ( df ) based on a criterion/filter

    Arguments:
        df  : Dataset
        crit: criterion/filter
    """
    df_test = None

    if crit is None: return df, df_test

    # apply filter.
    df_test = df.loc[crit]
    df      = df.loc[~crit]

    return df, df_test

def make_dataset(df, crit=None):
    return split_train_test(df, crit)

# Cell
def DateSplitter(dt='141022', seed=None):
    "Create function that splits `items` between train/val with based on date."
    def _inner(o):
        o.index  = np.arange(len(o))
        if seed is not None: torch.manual_seed(seed)
        indices  = o.index.values
        valid    = np.where(o.hour.astype(str).str.slice(0, 6) == dt)[0]
        train    = list(set(indices) - set(valid))

        return indices[train],indices[valid]
    return _inner

# Cell
def create_dl(df, bs, target, cat_names, cont_names, procs, splitter):
    "Create function that prepares `dataloader` using several arguments."
    splits = splitter(df)
    dls    = TabularDataLoaders.from_df(df,
                                     path='.',
                                     procs=procs,
                                     cat_names=cat_names,
                                     cont_names=cont_names,
                                     y_names="click",
                                     splits=splits,
                                     bs=2048
                                    )
    return dls

# Cell
def get_dl():
    df    = read_dataset()
    df    = add_time_feat(df)

    crit  = df.hour.astype('str').str.slice(0, 6) == '141023'
    tr, _ = make_dataset(df, crit)

    cat_names  = ['C1',
                  'banner_pos',
                  'site_id',
                  'site_domain',
                  'site_category',
                  'app_id',
                  'app_domain',
                  'app_category',
                  'device_id',
                  'device_ip',
                  'device_model',
                  'device_type',
                  'device_conn_type',
                  'click_hour',
                  'C14',
                  'C15',
                  'C16',
                  'C17',
                  'C18',
                  'C19',
                  'C20',
                  'C21'
                 ]

    cont_names = []
    procs      = [Categorify, FillMissing]
    target     = 'click'
    bs         = 2048
    splitter   = DateSplitter(seed=41)

    return create_dl(tr, bs, target, cat_names, cont_names, procs, splitter)